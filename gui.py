#(painfully) generated by chatgpt

from kivy.app import App
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.gridlayout import GridLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.textinput import TextInput
import requests

class MenuScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        layout = BoxLayout(orientation='vertical', spacing=10, padding=40)

        btn_config = Button(text="Config Screen")
        btn_config.bind(on_press=self.go_config)
        layout.add_widget(btn_config)

        btn_post = Button(text="Post Config Screen")
        btn_post.bind(on_press=self.go_post)
        layout.add_widget(btn_post)

        btn_measure = Button(text="Measurement Screen")
        btn_measure.bind(on_press=self.go_measure)
        layout.add_widget(btn_measure)

        btn_analyze = Button(text="Analyze Screen")
        btn_analyze.bind(on_press=self.go_analyze)
        layout.add_widget(btn_analyze)

        self.add_widget(layout)

    def go_config(self, instance):
        self.manager.current = 'config'

    def go_post(self, instance):
        self.manager.current = 'post_config'

    def go_measure(self, instance):
        self.manager.current = 'measurement'

    def go_analyze(self, instance):
        self.manager.current = 'analyze'

class GetConfigScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        top = BoxLayout(size_hint_y=None, height=40, spacing=10)
        top.add_widget(Label(text="Config Name:", size_hint_x=None, width=120))
        self.config_name_input = TextInput(text="config.toml", multiline=False)
        top.add_widget(self.config_name_input)

        btn_load = Button(text="Load Config", size_hint_x=None, width=150)
        btn_load.bind(on_press=self.load_config)
        top.add_widget(btn_load)

        layout.add_widget(top)

        self.output = TextInput(text="", readonly=True, font_size=14)
        layout.add_widget(self.output)

        btn_back = Button(text="Back to Menu", size_hint_y=None, height=40)
        btn_back.bind(on_press=lambda x: setattr(self.manager, 'current', 'menu'))
        layout.add_widget(btn_back)

        self.add_widget(layout)

    def load_config(self, instance):
        def flatten_dict(d, parent_key=''):
            items = []
            for k, v in d.items():
                new_key = f"{parent_key}.{k}" if parent_key else k
                if isinstance(v, dict):
                    items.extend(flatten_dict(v, new_key))
                else:
                    items.append((new_key, v))
            return items

        config_name = self.config_name_input.text.strip()
        try:
            response = requests.get("http://localhost:8000/config", params={"name": config_name})
            if response.status_code == 200:
                json_data = response.json()
                flat = flatten_dict(json_data)
                pretty = "\n".join(f"{k}: {v}" for k, v in flat)
                self.output.text = pretty
            else:
                self.output.text = f"Fehler beim Laden: {response.status_code}"
        except Exception as e:
            self.output.text = f"Fehler: {str(e)}"


class PostConfigScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        form = GridLayout(cols=2, row_default_height=40, spacing=10, size_hint_y=None)
        form.bind(minimum_height=form.setter('height'))

        # Beispiel wichtige Felder, editierbar
        self.inputs = {}

        def add_field(label_text, default):
            form.add_widget(Label(text=label_text, size_hint_x=None, width=140))
            ti = TextInput(text=str(default), multiline=False)
            form.add_widget(ti)
            self.inputs[label_text] = ti

        add_field("threshold", 60000)
        add_field("ddt", 1000)
        add_field("continuous_mode (True/False)", "False")
        add_field("tr_enabled (True/False)", "True")
        add_field("set_tr_decimation", 1)
        add_field("set_tr_postduration", 1500)
        add_field("set_tr_pretrigger", 2000)
        add_field("status_interval", 0)
        add_field("filter_highpass", 100)
        add_field("filter_lowpass", 200000)
        add_field("filter_order", 4)

        layout.add_widget(form)

        btn_post = Button(text="Post Config", size_hint_y=None, height=50)
        btn_post.bind(on_press=self.post_config)
        layout.add_widget(btn_post)

        self.status = Label(text="", size_hint_y=None, height=40)
        layout.add_widget(self.status)

        btn_back = Button(text="Back to Menu", size_hint_y=None, height=40)
        btn_back.bind(on_press=lambda x: setattr(self.manager, 'current', 'menu'))
        layout.add_widget(btn_back)

        self.add_widget(layout)

    def post_config(self, instance):
        try:
            config = {
                "threshold": int(self.inputs["threshold"].text),
                "ddt": int(self.inputs["ddt"].text),
                "continuous_mode": self.inputs["continuous_mode (True/False)"].text.lower() == "true",
                "tr_enabled": self.inputs["tr_enabled (True/False)"].text.lower() == "true",
                "set_tr_decimation": int(self.inputs["set_tr_decimation"].text),
                "set_tr_postduration": int(self.inputs["set_tr_postduration"].text),
                "set_tr_pretrigger": int(self.inputs["set_tr_pretrigger"].text),
                "status_interval": int(self.inputs["status_interval"].text)
            }
            filter_ = {
                "highpass": int(self.inputs["filter_highpass"].text),
                "lowpass": int(self.inputs["filter_lowpass"].text),
                "order": int(self.inputs["filter_order"].text)
            }
            payload = {
                "config": config,
                "filter": filter_
            }
            config_name = "config.toml"  # Du kannst hier noch ein Eingabefeld hinzufügen, falls gewünscht

            response = requests.post("http://localhost:8000/config", params={"name": config_name}, json=payload)
            if response.status_code == 200:
                self.status.text = "Config erfolgreich gepostet."
            else:
                self.status.text = f"Fehler beim Posten: {response.status_code}"
        except Exception as e:
            self.status.text = f"Fehler: {str(e)}"

class AnalyzeScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        # Parameter-Eingabefelder
        params_layout = GridLayout(cols=2, size_hint_y=None, spacing=10)
        params_layout.bind(minimum_height=params_layout.setter('height'))

        def add_param(label_text, default, attr_name):
            params_layout.add_widget(Label(text=label_text, size_hint_x=None, width=150))
            ti = TextInput(text=default, multiline=False, height=40, size_hint_y=None, font_size=16)
            setattr(self, attr_name, ti)
            params_layout.add_widget(ti)

        add_param("Sensor Distance (m):", "0.05", "sensor_distance_input")
        add_param("Timepicker:", "aic", "timepicker_input")
        add_param("Threshold:", "0.00001", "threshold_input")
        add_param("Datapath:", "2_sensor_measurments/20250527_plexiglass/csv_data_2", "datapath_input")
        add_param("Material:", "", "material_input")

        layout.add_widget(params_layout)

        btn_analyze = Button(text="Analyze", size_hint_y=None, height=50)
        btn_analyze.bind(on_press=self.analyze)
        layout.add_widget(btn_analyze)

        self.output = TextInput(text="", readonly=True, font_size=14)
        layout.add_widget(self.output)

        btn_back = Button(text="Back to Menu", size_hint_y=None, height=40)
        btn_back.bind(on_press=lambda x: setattr(self.manager, 'current', 'menu'))
        layout.add_widget(btn_back)

        self.add_widget(layout)

    def analyze(self, instance):
        try:
            params = {
                "plot": False,
                "sensor_distance": float(self.sensor_distance_input.text),
                "timepicker": self.timepicker_input.text.strip(),
                "threshold": float(self.threshold_input.text),
                "datapath": self.datapath_input.text.strip(),
                "material": self.material_input.text.strip()
            }
            response = requests.get("http://localhost:8000/analyzer", params=params)
            if response.status_code == 200:
                try:
                    json_data = response.json()
                    self.output.text = "\n".join(f"{k}: {v}" for k, v in json_data.items())
                except Exception:
                    self.output.text = response.text
            else:
                self.output.text = f"Fehler beim Analysieren: {response.status_code}"
        except Exception as e:
            self.output.text = f"Fehler: {str(e)}"

    def analyze(self, instance):
        try:
            params = {
                "plot": False,
                "sensor_distance": float(self.sensor_distance_input.text),
                "timepicker": self.timepicker_input.text.strip(),
                "threshold": float(self.threshold_input.text)
            }
            response = requests.get("http://localhost:8000/analyzer", params=params)
            if response.status_code == 200:
                try:
                    json_data = response.json()
                    print("Serverantwort:", json_data)  # Debug-Ausgabe in Konsole

                    pretty = ""
                    for k, v in json_data.items():
                        pretty += f"{k}: {v}\n"
                    self.output.text = pretty
                except Exception:
                    self.output.text = response.text
            else:
                self.output.text = f"Fehler beim Analysieren: {response.status_code}"
        except Exception as e:
            self.output.text = f"Fehler: {str(e)}"


class MeasurementScreen(Screen):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        layout = BoxLayout(orientation='vertical', padding=20, spacing=10)

        form = GridLayout(cols=2, row_default_height=40, spacing=10, size_hint_y=None)
        form.bind(minimum_height=form.setter('height'))

        form.add_widget(Label(text="Count:", size_hint_x=None, width=120))
        self.count_input = TextInput(text="5", multiline=False, input_filter='int')
        form.add_widget(self.count_input)

        form.add_widget(Label(text="Config Name:", size_hint_x=None, width=120))
        self.config_name_input = TextInput(text="config.toml", multiline=False)
        form.add_widget(self.config_name_input)

        form.add_widget(Label(text="Samples Rate:", size_hint_x=None, width=120))
        self.samples_rate_input = TextInput(text="1000", multiline=False, input_filter='int')
        form.add_widget(self.samples_rate_input)

        form.add_widget(Label(text="Averages Rate:", size_hint_x=None, width=120))
        self.averages_rate_input = TextInput(text="100", multiline=False, input_filter='int')
        form.add_widget(self.averages_rate_input)

        layout.add_widget(form)

        btn_measure_two = Button(text="Measure Two Sensors", size_hint_y=None, height=50)
        btn_measure_two.bind(on_press=self.measure_two)
        layout.add_widget(btn_measure_two)

        btn_measure_one = Button(text="Measure One Sensor", size_hint_y=None, height=50)
        btn_measure_one.bind(on_press=self.measure_one)
        layout.add_widget(btn_measure_one)

        self.status_label = Label(text="Ready", size_hint_y=None, height=40)
        layout.add_widget(self.status_label)

        btn_back = Button(text="Back to Menu", size_hint_y=None, height=40)
        btn_back.bind(on_press=lambda x: setattr(self.manager, 'current', 'menu'))
        layout.add_widget(btn_back)

        self.add_widget(layout)

    def measure_two(self, instance):
        try:
            count = int(self.count_input.text)
            config_name = self.config_name_input.text.strip()
            samples_rate = int(self.samples_rate_input.text)
            averages_rate = int(self.averages_rate_input.text)

            payload = {
                "name": "user_measurement",
                "config_name": config_name,
                "count": count,
                "samples_rate": samples_rate,
                "averages_rate": averages_rate
            }
            response = requests.post("http://localhost:8000/measurement", json=payload)
            self.status_label.text = f"2-Sensor Messung: {response.status_code}"
        except Exception as e:
            self.status_label.text = f"Fehler: {str(e)}"

    def measure_one(self, instance):
        try:
            count = int(self.count_input.text)
            config_name = self.config_name_input.text.strip()

            payload = {
                "name": "user_measurement",
                "config_name": config_name,
                "count": count
            }
            response = requests.post("http://localhost:8000/one_sensor", json=payload)
            self.status_label.text = f"1-Sensor Messung: {response.status_code}"
        except Exception as e:
            self.status_label.text = f"Fehler: {str(e)}"


class RaspApp(App):
    def build(self):
        sm = ScreenManager()
        sm.add_widget(MenuScreen(name='menu'))
        sm.add_widget(GetConfigScreen(name='config'))
        sm.add_widget(PostConfigScreen(name='post_config'))
        sm.add_widget(MeasurementScreen(name='measurement'))
        sm.add_widget(AnalyzeScreen(name='analyze'))
        return sm

if __name__ == '__main__':
    RaspApp().run()